(load "11-environment.scm")

(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan bindings)
      (cond ((null? bindings)
             (env-loop (enclosing-environment env)))
            ((eq? var (first-var bindings))
             (first-val bindings))
            (else (scan (rest-bindings bindings)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (scan (frame-bindings (first-frame env)))))
  (env-loop env))

(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan bindings)
      (cond ((null? bindings)
             (env-loop (enclosing-environment env)))
            ((eq? var (first-var bindings))
             (set-first-val! bindings val))
            (else (scan (rest-bindings bindings)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (scan (frame-bindings (first-frame env)))))
  (env-loop env))

(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan bindings)
      (cond ((null? bindings)
             (add-binding-to-frame! var val frame))
            ((eq? var (first-var bindings))
             (set-first-val! bindings val))
            (else (scan (rest-bindings bindings)))))
    (scan (frame-bindings frame))))
